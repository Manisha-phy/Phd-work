/*----It will generate a simulation file which will be used in effective radiation length (X/X_0) calculation
we can also use simfile also by using DPM generator, The effectiveradiation length is also dependent on particle type. 
All the standard value in the PDG are for the particle
for which X/X_0 is maximum. see radiation length for different materials.
http://pdg.lbl.gov/2013/AtomicNuclearProperties/HTML_PAGES/014.html
*/
materialbudgetlambdassim(Int_t nEvents = 1000000, TString  SimEngine ="TGeant3", Float_t mom = 0.1)
{

  TString  OutputFile     ="geantinosimLambdaGe.root";
  TString  ParOutputfile  ="geantinoparamsLambdaGe.root";
  TString  MediaFile      ="media_pnd.geo";
  gDebug                  = 0;
  TString digiFile        = "all.par"; //The emc run the hit producerFairMCPointFairMCPoint directly 
  // choose your event generator 
  Bool_t UseEvtGen	      =kFALSE; 
  Bool_t UseEvtGenDirect      =kFALSE;     
  Bool_t UseDpm 	      =kFALSE;
  Bool_t UseBoxGenerator      =kTRUE;
  int verboseLevel = 1;
 // Double_t BeamMomentum = 0.; // beam momentum ONLY for the scaling of the dipole field.
//  if (UseBoxGenerator)
  //  {
   //   BeamMomentum   =15.0; // ** change HERE if you run Box generator
   // }
  //else
    //{
     // BeamMomentum = mom;  // for DPM/EvtGen BeamMomentum is always = mom
    //}
  
  //------------------------------------------------------------------

  TStopwatch timer;
  timer.Start();
  gRandom->SetSeed(); 

  // Create the Simulation run manager--------------------------------
  FairRunSim *fRun = new FairRunSim();
  fRun->SetName(SimEngine.Data() );
  fRun->SetOutputFile(OutputFile.Data());
  fRun->SetWriteRunInfoFile(kFALSE);
  fRun->SetBeamMom(mom);
//  fRun->SetBeamMom(BeamMomentum);
  fRun->SetMaterials(MediaFile.Data());
  FairRuntimeDb *rtdb=fRun->GetRuntimeDb();
  
  // Set the parameters 
  //-------------------------------
  TString allDigiFile = gSystem->Getenv("VMCWORKDIR");
  allDigiFile += "/macro/params/";
  allDigiFile += digiFile;
 
 
  //-------Set the parameter output --------------------
  FairParAsciiFileIo* parIo1 = new FairParAsciiFileIo();
  parIo1->open(allDigiFile.Data(),"in");
  rtdb->setFirstInput(parIo1);        

 //---------------------Set Parameter output      ---------- 
  Bool_t kParameterMerged=kTRUE;
  FairParRootFileIo* output=new FairParRootFileIo(kParameterMerged);
  output->open(ParOutputfile.Data());
  rtdb->setOutput(output);

   // Create and add detectors

 //-------------------------  CAVE      -----------------

  FairModule *Cave= new PndCave("CAVE");
  Cave->SetGeometryFileName("pndcave.geo");
  fRun->AddModule(Cave); 
  //-------------------------  Magnet   ----------------- 
 /* FairModule *Magnet= new PndMagnet("MAGNET");
  //Magnet->SetGeometryFileName("FullSolenoid_V842.root");
  Magnet->SetGeometryFileName("FullSuperconductingSolenoid_v831.root");
  fRun->AddModule(Magnet);
  FairModule *Dipole= new PndMagnet("MAGNET");
  Dipole->SetGeometryFileName("dipole.geo");
  fRun->AddModule(Dipole);*/
  //-------------------------  Pipe     -----------------
  FairModule *Pipe= new PndPipe("PIPE");
  Pipe->SetGeometryFileName("beampipe_201309.root");
  fRun->AddModule(Pipe);
  //-------------------------  STT       -----------------
  /*FairDetector *Stt= new PndStt("STT", kTRUE);
  Stt->SetGeometryFileName("straws_skewed_blocks_35cm_pipe.geo");
  fRun->AddModule(Stt);
  //-------------------------  MVD       -----------------
  FairDetector *Mvd = new PndMvdDetector("MVD", kTRUE);
  Mvd->SetGeometryFileName("Mvd-2.1_FullVersion.root");
  fRun->AddModule(Mvd);*/
//----------------------------Start Detector-----------------
  FairDetector *Start = new PndStartDetector("START", kFALSE);
  Start->SetGeometryFileName("LambdaDisksSeparatedSupport.root");
  Start->SetVerboseLevel(verboseLevel);
  fRun->AddModule(Start);
 //-------------------------  GEM       -----------------
 /* FairDetector *Gem = new PndGemDetector("GEM", kTRUE);
  Gem->SetGeometryFileName("gem_3Stations.root");
  fRun->AddModule(Gem);
  //-------------------------  EMC       -----------------
  PndEmc *Emc = new PndEmc("EMC",kTRUE);
  Emc->SetGeometryVersion(1);
  Emc->SetStorageOfData(kFALSE);
  fRun->AddModule(Emc);
  //-------------------------  SCITIL    -----------------
  FairDetector *SciT = new PndSciT("SCIT",kTRUE);
  SciT->SetGeometryFileName("barrel-SciTil_07022013.root");
  fRun->AddModule(SciT);
  //-------------------------  DRC       -----------------
  PndDrc *Drc = new PndDrc("DIRC", kTRUE);
  Drc->SetGeometryFileName("dirc_l0_p0_updated.root"); 
  Drc->SetRunCherenkov(kFALSE);
  fRun->AddModule(Drc); 
  //-------------------------  DISC      -----------------
  PndDsk* Dsk = new PndDsk("DSK", kTRUE);
  Dsk->SetStoreCerenkovs(kFALSE);
  Dsk->SetStoreTrackPoints(kFALSE);
  fRun->AddModule(Dsk);
  //-------------------------  MDT       -----------------
  PndMdt *Muo = new PndMdt("MDT",kTRUE);
  Muo->SetBarrel("fast");
  Muo->SetEndcap("fast");
  Muo->SetMuonFilter("fast");
  Muo->SetForward("fast");
  Muo->SetMdtMagnet(kTRUE);
  Muo->SetMdtMFIron(kTRUE);
  fRun->AddModule(Muo);
  //-------------------------  FTS       -----------------
  FairDetector *Fts= new PndFts("FTS", kTRUE);
  Fts->SetGeometryFileName("fts.geo");
  fRun->AddModule(Fts); 
  //-------------------------  FTOF      -----------------
  FairDetector *FTof = new PndFtof("FTOF",kTRUE);
  FTof->SetGeometryFileName("ftofwall.root");
  fRun->AddModule(FTof);
  //-------------------------  RICH       ----------------
  FairDetector *Rich= new PndRich("RICH",kFALSE);
  Rich->SetGeometryFileName("rich_v2.geo");
  fRun->AddModule(Rich);*/

  // Create and Set Event Generator
  //-------------------------------
  FairPrimaryGenerator* primGen = new FairPrimaryGenerator();
  //primGen->SetEventMeanTime(10);
  fRun->SetGenerator(primGen);
	 
  if(UseBoxGenerator){	// Box Generator
     FairBoxGenerator* boxGen = new FairBoxGenerator(0, 5); // 13 = muon; 5 = multipl.
     boxGen->SetPRange(mom,0.5); // GeV/c
     boxGen->SetPhiRange(0., 360.); // Azimuth angle range [degree]
     boxGen->SetThetaRange(0., 180.); // Polar angle in lab system range [degree]
     boxGen->SetXYZ(0., 0., 0.); // cm
     boxGen->SetCosTheta();
     primGen->AddGenerator(boxGen);
  }
  if(UseDpm){
  	  PndDpmDirect *Dpm= new PndDpmDirect(mom,1);
	  primGen->AddGenerator(Dpm);
  }
  if(UseEvtGen){	
	  TString  EvtInput =gSystem->Getenv("VMCWORKDIR");
	  EvtInput+="/input/psi2s_jpsi2pi_1k.evt";	
	  FairEvtGenGenerator* evtGen = new FairEvtGenGenerator(EvtInput.Data());
	  primGen->AddGenerator(evtGen);
  }	
  if(UseEvtGenDirect){
          TString  EvtInput =gSystem->Getenv("VMCWORKDIR");
          EvtInput+="/macro/run/psi2s_Jpsi2pi_Jpsi_mumu.dec";	
          PndEvtGenDirect *EvtGen = new PndEvtGenDirect("pbarpSystem", EvtInput.Data(), mom);
	  EvtGen->SetStoreTree(kTRUE);
	  primGen->AddGenerator(EvtGen);
  }	

 //---------------------Create and Set the Field(s)---------- 
/*  PndMultiField *fField= new PndMultiField("FULL");
  fRun->SetField(fField);

 // EMC Hit producer
  //-------------------------------
  PndEmcHitProducer* emcHitProd = new PndEmcHitProducer();
  fRun->AddTask(emcHitProd);*/
  fRun->SetStoreTraj(kFALSE);
  fRun->SetRadLenRegister(kTRUE);
 //-------------------------  Initialize the RUN  -----------------  
  fRun->Init();
  Start->Initialize();
 //-------------------------  Run the Simulation  -----------------
  fRun->SetTrackingDebugMode(false);
  fRun->Run(nEvents);
 //-------------------------  Save the parameters ----------------- 
  rtdb->saveOutput();
 //------------------------Print some info and exit----------------     
  timer.Stop();
  Double_t rtime = timer.RealTime();
  Double_t ctime = timer.CpuTime();
  printf("RealTime=%f seconds, CpuTime=%f seconds\n",rtime,ctime);
  
  cout << " Test passed" << endl;
  cout << " All ok " << endl;
  //fRun->CreateGeometryFile("lambda.root");
  //TFile* file = new TFile("lambda.root");
  //file->Get("FAIRGeom"); 
  //gGeoManager->SetVisLevel(4);// change vis level if not seeing some geometry
  //gGeoManager->GetMasterVolume()->Draw("ogl");

  //exit(0);
//fRun->CreateGeometryFile("my.root");
}  
  
